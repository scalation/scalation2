

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Wed Aug  9 01:25:50 EDT 2023
 *  @see     LICENSE (MIT style license file).
 *
 *  @note    B+Trees Node
 */

package scalation
package database

import scala.reflect.ClassTag
import scala.runtime.ScalaRunTime.stringOf

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `BpTreeMap` class provides sorted maps that use the B+Tree Data Structure.
 *  Inserts may cause the splitting of nodes.
 *  @tparam V      the type of the values assigned to keys in this sorted map
 *  @param  order  the order (maximum number of children per node)
 */
object BpNode:

    private val debug = debugf ("BpNode", true)                    // debug function
    private val flaw  = flawf ("BpNode")                           // flaw function

    private var order = 5                                          // maximum number of references (reset as needed)
    private var maxk  = order - 1                                  // maximum number of keys (before overflow)
    private var half  = maxk / 2                                   // half of max keys (floor)
    private var halfp = maxk - half                                // half (plus) of max keys (ceiling)
    private var mink  = halfp - 1                                  // minimum number of keys (before underflow)

    debug ("init", s"order = $order, maxk = $maxk, half = $half, halfp = $halfp, mink = $mink")

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Set the order of BpNodes to order_.
     *  @param order_  the new order for BpNodes (must be at least 4)
     */
    def setOrder (order_ : Int): Unit = 
        if order < 4 then flaw ("object", s"order_ = $order_ must be at least 4")
        else
            order = order_
            maxk  = order - 1
            half  = maxk / 2
            halfp = maxk - half
            mink  = half - 1
        end if
    end setOrder

end BpNode

import BpNode._

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `BpNode` class defines nodes of size order that that may be stored in a B+tree.
 *  Keys have type `ValueType` and may reference values of `Any` type.
 *  @param  isLeaf  whether this node is a leaf
 */
class BpNode (val isLeaf: Boolean = true)
      extends Serializable:

    private [database] var nKeys = 0                               // number of active keys (initialize to 0) 
    private            val key   = Array.ofDim [ValueType] (maxk)  // array to hold keys
    private [database] val ref   = Array.ofDim [Any] (order)       // array to hold values or reference nodes

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Construct a new root node with one key (and two references) in it.
     *  @param left   the left node (<= dkey)
     *  @param dkey   the divider key
     *  @param right  the right node (> dkey)
     */
    def this (left: BpNode, dkey: ValueType, right: BpNode) =
        this (false)
        nKeys  = 1
        key(0) = dkey                                              // divider key
        ref(0) = left; ref(1) = right                              // left and right references
    end this

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return whether this node has underflowed.
     */
    def underflow: Boolean = nKeys < mink

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return whether this node is rich (i.e., has surplus keys).
     */
    def rich: Boolean = nKeys > mink

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the key at index position i.
     *  @param i  the index position in this node
     */
    def apply (i: Int): ValueType =
        if i >= nKeys then flaw ("apply", s"index i = $i must be less than nKeys = $nKeys")
        key(i)
    end apply

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Update the key at index position i.
     *  @param i  the index position in this node
     *  @param k  the new value for key(i)
     */
    def update (i: Int, k: ValueType): Unit =
        if i >= nKeys then flaw ("update", s"index i = $i must be less than nKeys = $nKeys")
        key(i) = k
    end update

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return whether the key at index i equals k.
     *  @param k  the key to check
     *  @param i  the index position in this node
     */
    def eqAt (k: ValueType, i: Int): Boolean = i < nKeys && k == key(i)

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Find and return the first position where 'k <= key(i)' in this node.
     *  If k is at least as large as all keys in this node, return nkeys.
     *  @param k  the key whose position is sought
     */
    def find (k: ValueType): Int =
        val i = key.indexWhere (k <= _)
        if i < 0 then nKeys else i
    end find

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Add the new key k and value v into this LEAF node at insertion position ip.
     *  Return whether this node needs to be split as the node is already full.
     *  @param k   the new key
     *  @param v   the new value
     */
    def add (k: ValueType, v: Any): Boolean =
        if nKeys >= maxk then true                                 // leaf node needs to be split first
        else
            val ip = find (k)                                      // insertion position
            for i <- nKeys until ip by -1 do                       // make room
                key(i) = key(i-1)
                ref(i) = ref(i-1)
            end for
            key(ip) = k                                            // insert key and value
            ref(ip) = v
            nKeys  += 1
            false                                                  // split not needed
        end if
    end add

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Add the new key k and value v into this INTERNAL node at insertion position ip.
     *  Return whether this node needs to be split as the node is already full.
     *  @param k   the new key
     *  @param v   the new value
     */
    def addI (k: ValueType, v: BpNode): Boolean = 
        if nKeys >= maxk then true                                 // internal node needs to be split first
        else
            val ip = find (k)                                      // insertion position
            for i <- nKeys until ip by -1 do                       // make room
                key(i) = key(i-1)
                ref(i+1) = ref(i)                                  // refs on right of key
            end for
            key(ip)   = k                                          // insert key and value
            ref(ip+1) = v
            nKeys    += 1
            false                                                  // split not needed
        end if
    end addI

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Split this LEAF node by creating a right sibling rt and moving half
     *  the keys and references to that new node.  Return the divider key and
     *  right sibling node.
     *  @param h_l  the number of keys to remain in this (the left) node
     *  @param h_r  the number of keys to move to the new right node
     */
    def split (h_l: Int = halfp, h_r: Int = half): (ValueType, BpNode) =
        val rt = new BpNode ()
        for i <- 0 until h_r do                                    // move largest h_r to rt
            rt.key(i) = key(h_l + i)
            rt.ref(i) = ref(h_l + i)
        end for
        rt.ref(h_r) = ref(maxk)                                    // move the last ref
        ref(h_l)    = rt                                           // link the leaf nodes
        rt.nKeys    = h_r
        nKeys       = h_l
        (key(nKeys-1), rt)
    end split

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Split this INTERNAL node by creating a right sibling rt and moving half
     *  the keys and references to that new node.  Return the divider key and
     *  right sibling node.
     *  @param h_l  the number of keys to remain in this (the left) node
     *  @param h_r  the number of keys to move to the new right node
     */
    def splitI (h_l: Int = halfp+1, h_r: Int = half-1): (ValueType, BpNode) =
        val rt = new BpNode (false)
        for i <- 0 until h_r do                                    // move largest h_r to rt
            rt.key(i) = key(h_l + i)
            rt.ref(i) = ref(h_l + i)
        end for
        rt.ref(h_r) = ref(maxk)                                    // move the last ref
        ref(maxk)   = rt                                           // link the leaf nodes
        rt.nKeys    = h_r
        nKeys       = h_l
        (key(nKeys-1), rt)
    end splitI

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Promote the divider key, so that it is only in the parent node.
     *  Called after split and should only be used for internal node splits.
     */
    def promote (): Unit = nKeys -= 1

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Remove key k and its reference from this node and check for underflow.
     *  @param k   the key to be removed from this node
     *  @param dp  the deletion index position
     */
    def remove (k: ValueType, dp: Int): Boolean =
        if key(dp) == k then                                       // make sure it really is the key
            nKeys -= 1                                             // decrement the number of keys
            for i <- dp until nKeys do
                key(i) = key(i+1)                                  // shift keys left
                ref(i) = ref(i+1)
            end for
            underflow                                              // if true, node underflows
        else
            println (s"remove: key $k not found")
            false
        end if
    end remove

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Remove the divider key in this parant node at the dp index position and
     *  the reference to the right sibling (\) in [. / kdp \ .].  Check for underflow.
     *  @param dp  the deletion index position
     */
    def removeRight (dp: Int): Boolean =
        nKeys -= 1                                                 // decrement the number of keys
        for i <- dp until nKeys do
            key(i)   = key(i+1)                                    // shift keys left
            ref(i+1) = ref(i+2)
        end for
        underflow                                                  // if true, node underflows
    end removeRight

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Merge this node with its right sibling.
     *  @param right  the right sibling node
     */
    def merge (right: BpNode): Unit =
        for i <- 0 until right.nKeys do
            key(nKeys + i) = right.key(i)
            ref(nKeys + i) = right.ref(i)
        end for
        nKeys += right.nKeys
        ref(nKeys) = right.ref(right.nKeys)
    end merge

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Convert this node to a string.
     */
    override def toString: String =
        val sb = StringBuilder ("[ . " )
        for i <- 0 until nKeys do sb ++= (s"${key(i)} . ")
        sb ++= ("]" )
        sb.toString
    end toString

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Show the node data structure.
     */
    def show (): Unit =
        println (s"isLeaf = $isLeaf")
        println (s"nKeys  = $nKeys")
        println (s"key    = ${stringOf (key)}")
        println (s"ref    = ${stringOf (ref)}")
    end show

end BpNode


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `bpNodeTest2` main function tests the `BpNode` class by inserting random
 *  key values and testing a leaf node split.
 *  > runMain scalation.database.bpNodeTest
 */
@main def bpNodeTest (): Unit =

    import java.util.Random

    banner ("Example of an Leaf Node Split")

    val totKeys = 5
    val mx      = 10 * totKeys
    val seed    = 1
    val rng     = new Random (seed)

    val node    = new BpNode ()
    var k_n: (ValueType, BpNode) = null                // divider key, new right node

    for i <- 1 to totKeys do
        val key = rng.nextInt (mx)
        banner (s"put key = $key")
        val split = node.add (key, 2 * key)
        println (s"split = $split, node = $node")
        if split then
            k_n = node.split ()                        // split keys between node (2) and right (2)
            node.add (key, 2 * key)                    // try again after split
        end if
        if k_n != null then println (s"node = $node, right = ${k_n._2}, divider = ${k_n._1}")
    end for

    banner ("Show Arrays")
    node.show ()

end bpNodeTest


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `bpNodeTest2` main function tests the `BpNode` class by inserting random
 *  key values and testing a internal node split.
 *  > runMain scalation.database.bpNodeTest2
 */
@main def bpNodeTest2 (): Unit =

    import java.util.Random

    banner ("Example of an Internal Node Split")

    val totKeys = 5
    val mx      = 10 * totKeys
    val seed    = 1
    val rng     = new Random (seed)

    val node    = new BpNode (false)                   // false => not isLeaf
    var k_n: (ValueType, BpNode) = null                // tuple: (divider key, new right node)

    for i <- 1 to totKeys do
        val key = rng.nextInt (mx)
        banner (s"put key = $key")
        val split = node.add (key, 2 * key)
        println (s"split = $split, node = $node")
        if split then
            k_n = node.split ()                        // split keys between node (2) and right (2)
            node.promote ()                            // promote the divider key
            node.add (key, 2 * key)                    // try again after split
        end if
        if k_n != null then println (s"node = $node, right = ${k_n._2}, divider = ${k_n._1}")
    end for

    banner ("Show Arrays")
    node.show ()

end bpNodeTest2

