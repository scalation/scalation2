
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Mon Jul  4 12:55:00 EDT 2022
 *  @see     LICENSE (MIT style license file).
 *
 *  @node    Map Implemented Using B+Trees
 *
 *  Split Nodes on Overflow
 *  Merge Nodes on Underflow (not yet implemented)
 */

package scalation
package database

//import scala.collection.SortedMapFactoryDefaults
import scala.collection.mutable.{AbstractMap, SortedMap} // SortedMapOps}
import scala.reflect.ClassTag

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `BpTreeMap` class provides sorted maps that use the B+Tree Data Structure.
 *  Inserts may cause the splitting of nodes.
 *  @tparam K      the type of the keys contained in this sorted map
 *  @tparam V      the type of the values assigned to keys in this sorted map
 *  @param  order  the order (maximum number of children per node)
 *  @param  ord    the implicit ordering used to compare objects of type K
 */
class BpTreeMap [K: ClassTag, V: ClassTag] (order: Int = 5)(implicit val ord: Ordering [K])
      extends AbstractMap [K, V]
         with SortedMap [K, V]
//       with SortedMapOps [K, V, BpTreeMap, BpTreeMap [K, V]]
//       with SortedMapFactoryDefaults [K, V, BpTreeMap, Iterable, Map]
         with Serializable:

    var count = 0                                             // count # nodes accessed (performance)

    private val debug = debugf ("BpTreeMap", true)            // debug function
    private val flaw  = flawf ("BpTreeMap")                   // flaw function
    private val mxk   = order - 1                             // maximum number of keys
    private val half  = mxk / 2                               // half of max keys

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** The `Node` inner class defines nodes that are stored in this B+tree.
     *  @param isLeaf  whether this node is a leaf
     */
    class Node (val isLeaf: Boolean = true)
          extends Serializable:

        val key   = Array.ofDim [K] (mxk)                     // array to hold keys
        val ref   = Array.ofDim [Any] (order)                 // array to hold values or reference nodes
        var nKeys = 0                                         // number of active keys 
        var next: Node = null                                 // reference to next leaf node

        //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        /** Construct a new root node with one key (and two references) in it.
         *  @param lt  the left node
         *  @param kd  the divider key
         *  @param rt  the right node
         */
        def this (lt: Node, kd: K, rt: Node) =
            this (false)
            nKeys  = 1
            ref(0) = lt; key(0) = kd; ref(1) = rt
        end this

        //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        /** Find the "<=" position of key k in this node.  If k is larger than all
         *  keys in this node, return nkeys.
         *  @param k  the key whose position is sought
         */
        def find (k: K): Int =
            val j = key.indexWhere (ord.lteq (k, _))
            if j < 0 then nKeys else j
        end find

        //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        /** When space is available, wedge the new key k and value v into this node
         *  at the given insertion position ip.
         *  @param k     the new key
         *  @param v     the new value
         *  @param ip    the insertion position
         *  @param left  whether to start with from the left size of the key
         */
        def wedge (k: K, v: Any, ip: Int, left: Boolean = true): Unit =
            if nKeys > mxk then 
                flaw ("wedge", "node is already full")
            else
                for j <- nKeys until ip by -1 do
                    key(j) = key(j-1)
                    if left || j > ip + 1 then ref(j) = ref(j-1)
                end for
                key(ip) = k; if left then ref(ip) = v else ref(ip+1) = v
                nKeys += 1
            end if
        end wedge

        //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        /** Split this node by creating a right sibling rt and moving half the keys and
         *  references to that new node.  Return the divider key and the right sibling node.
         */
        def split (): (K, Node) =
            val rt = new Node (isLeaf)
            for j <- 0 until half do
                rt.key(j) = key(j + half)
                rt.ref(j) = ref(j + half)
            end for
            rt.ref(half) = ref(mxk)
            if isLeaf then ref(mxk) = rt
            rt.nKeys = half
            nKeys    = half
            (key(half-1), rt)
        end split

        //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        /** Show/print the contents of this node.
         */
        def show (): Unit =
            print ("[ . " )
            for j <- 0 until nKeys do print (s"${key(j)} . ")
            println ("]" )
        end show

    end Node


    private var keyCount = 0                                  // counter for total number of keys

    private var root  = new Node ()                           // root node of this B+Tree
    private val first = root                                  // first leaf node in this B+Tree

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** The `TreeIterator` inner class supports iterating over all the elements
     *  in a B+Tree by traversing through the leaf nodes of the tree.
     *  @param ns  the starting leaf node (defaults to first)
     *  @param js  the starting within node index (defaults to 0)
     */
    class TreeIterator (ns: Node = first, js: Int = 0) extends Iterator [(K, V)]:
        var (n, j) = (ns, js)
        def hasNext: Boolean = j < n.nKeys - 1 || n.next != null
        def next (): (K, V) =
            if j < n.nKeys - 1 then j += 1 else { n = n.next; j = 0 }
            (n.key(j), n.ref(j).asInstanceOf [V])
        end next
    end TreeIterator

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return an iterator for retrieving all the elements in this B+Tree.
     *  @see scala.collection.IterableOnce
     */
    def iterator: Iterator [(K, V)] = new TreeIterator ()

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return an iterator for retrieving all the elements in this B+Tree starting
     *  from key start.  Returns null if all keys in tree are smaller than start.
     *  @see scala.collection.SortedMapOps
     *  @param start  the key to start with
     */
    def iteratorFrom (start: K): Iterator [(K, V)] =
        val (ns, js) = findp (start, root)
        if ns != null then new TreeIterator (ns, js)
        else null
    end iteratorFrom

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return an iterator for retrieving all the keys in this B+Tree starting
     *  from key start.
     *  @see scala.collection.SortedMapOps
     *  @param start  the key to start with
     */
    def keysIteratorFrom (start: K): Iterator [K] =
        throw new UnsupportedOperationException ("keysIteratorFrom not available, use iteratorFrom instead")
    end keysIteratorFrom

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the ordering for this B+Tree.
     *  @see scala.collection.SortedOps
     */
    def ordering: Ordering [K] = ord

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the the submap starting at from and ending before until.
     *  @see scala.collection.SortedOps
     *  @param from   the starting key (inclusive)
     *  @param until  the ending key (exclusive)
     */
    def rangeImpl (from: Option [K], until: Option [K]): BpTreeMap [K, V] =
        val subtree = new BpTreeMap [K, V] (order)
        val it = if from.isDefined then iteratorFrom (from.get)
                 else iterator
        var cont = true
        while cont && it.hasNext do 
            val (k, v) = it.next ()
            if ! until.isDefined || ord.lt (k, until.get) then subtree.addOne ((k, v))
            else cont = false
        end while
        subtree
    end rangeImpl

//  def rangeImpl (from: Option [K], until: Option [K]): SortedMap [K, V @uncheckedVariance] = ???

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the value associated with the key by looking it up in this B+Tree.
     *  @param key  the key used for look up
     */
    def get (key: K): Option [V] = Option (find (key, root))

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Add one key-value pair into this B+Tree and return this (called by put).
     *  Note:  it splits the node that overflows
     *  @param elem   the key-value pair to add/insert
     */
    def addOne (elem: (K, V)): this.type =
        val (key, value) = elem
        keyCount += 1                                         // increment the key count
        insert (key, value, root)
        this
    end addOne

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Subtract/remove the one element (key-value pair) with the given key.
     *  Note:  it merges home nodes upon underflow
     *  @param key  the key whose element is to be removed
     */
    def subtractOne (key: K): this.type =
        keyCount -= 1                                         // decrement the key count
        // FIX - to be implemented
        this
    end subtractOne

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Show/print this B+Tree.
     */
    def show (): Unit =
        println ("BpTreeMap")
        printT (root, 0)
        println ("-" * 60)
    end show

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Print this B+Tree map using a preorder traversal and indenting each level.
     *  @param n      the current node to print
     *  @param level  the current level in the B+Tree
     */
    private def printT (n: Node, level: Int): Unit =
        println ("-" * 60)
        print ("\t" * level + "[ . ")
        for i <- 0 until n.nKeys do print (s"${n.key(i)} . ")
        println ("]")
        if ! n.isLeaf then
            for j <- 0 to n.nKeys do printT (n.asInstanceOf [Node].ref(j).asInstanceOf [Node], level + 1)
        end if
    end printT
 
    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the size of this B+Tree. 
     */
    override def size: Int = keyCount

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Recursive helper method for finding key in this B+tree.
     *  @param key  the key to find
     *  @param n    the current node
     */
    private def find (key: K, n: Node): V =
        count += 1
        val ip = n.find (key)
        println (s"find: ip = $ip"); n.show ()
        show ()
        if n.isLeaf then
            if ip < n.nKeys && key == n.key(ip) then n.ref(ip).asInstanceOf [V]
            else null.asInstanceOf [V]
        else
            find (key, n.ref(ip).asInstanceOf [Node])
        end if
    end find

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Recursive helper method for finding key in this B+tree.
     *  @param key  the key to find
     *  @param n    the current node
     */
    private def findp (key: K, n: Node): (Node, Int) =
        count += 1
        val ip = n.find (key)
        if n.isLeaf then
            if ip < n.nKeys && key == n.key(ip) then (n, ip)
            else (null, -1)
        else
            findp (key, n.ref(ip).asInstanceOf [Node])
        end if
    end findp

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Recursive helper method for inserting key and ref into this B+tree.
     *  @param key  the key to insert
     *  @param ref  the value/node to insert
     *  @param n    the current node
     */
    private def insert (key: K, ref: V, n: Node): (K, Node) =
        var kd_rt: (K, Node) = null
        if n.isLeaf then                                                 // handle leaf node
            kd_rt = add (n, key, ref)
            if kd_rt != null then
                if n != root then return kd_rt
                root = new Node (root, kd_rt._1, kd_rt._2)
        else                                                             // handle internal node
            kd_rt = insert (key, ref, n.ref(n.find (key)).asInstanceOf [Node])
            if kd_rt != null then
                kd_rt = addI (n, kd_rt._1, kd_rt._2)
                if kd_rt != null && n == root then root = new Node (root, kd_rt._1, kd_rt._2)
        end if
        kd_rt
    end insert

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Add a new key k and value v into leaf node n.  If it is already full, a split will
     *  be triggered, in which case the divider key and new right sibling node are returned.
     *  @param n  the current node
     *  @param k  the new key
     *  @param v  the new left value
     */
    private def add (n: Node, k: K, v: V): (K, Node) =
        var kd_rt: (K, Node) = null                                     // divider key, right sibling
        var split = false
        if n.nKeys == mxk then
            split = true
            debug ("add", s"before leaf split: n = $n")
            kd_rt = n.split ()                                          // split n -> r & rt
            debug ("add", s"after leaf split: n = $n \nkd_rt = $kd_rt")
            if ord.gt (k, n.key(n.nKeys - 1)) then
                kd_rt._2.wedge (k, v, kd_rt._2.find (k), true)          // wedge into right sibling
                return kd_rt
        end if
        n.wedge (k, v, n.find (k), true)                                // wedge into current node
        if split then kd_rt else null
    end add

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Add a new key 'k' and value 'v' into internal node 'n'.  If it is already
     *  full,  a 'split' will be triggered, in which case the divider key and new
     *  right sibling node are returned.
     *  @param n  the current node
     *  @param k  the new key
     *  @param v  the new left value
     */
    private def addI (n: Node, k: K, v: Any): (K, Node) =
        debug ("addI", s"k = $k"); n.show ()
        var kd_rt: (K, Node) = null                                     // divider key, right sibling
        var split = false
        if n.nKeys == mxk then
            split = true
            debug ("addI", s"before internal split: n = $n")
            kd_rt = n.split ()
            // split n -> n & rt
            val promotedvalue = n.key(n.nKeys-1)
            n.nKeys -= 1                                                // remove promoted smallest right key
            debug ("addI", s"after internal split: n = $n \nkd_rt = $kd_rt")
            if ord.gt (k, promotedvalue) then
                kd_rt._2.wedge (k, v, kd_rt._2.find (k), false)         // wedge into right sibling
                return kd_rt
        end if
        n.wedge (k, v, n.find (k), false)                               // wedge into current node
        if split then kd_rt else null
    end addI

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Merge node chain 'isplit-1' by merging this node chain with the last
     *  node chain.  Deccrement 'isplit'.  If 'isplit' becomes negative,
     *  set back to previous phase.
     */
    private def merge (): Unit =
        debug ("merge", s"node that underflows")
    end merge

end BpTreeMap


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `bpTreeMapTest` main function used for testing the `BpTreeMap` class by
 *  inserting increasing key values.
 *  > runMain scalation.database.bpTreeMapTest
 */
@main def bpTreeMapTest (): Unit =

    val tree = new BpTreeMap [Int, Int] ()

    val totKeys = 26
    for i <- 1 until totKeys by 2 do
        tree.put (i, i * i)
        tree.show ()
        println ("=" * 60)
    end for
    for i <- 0 until totKeys do println (s"key = $i, value = ${tree.get(i)}")
    println ("-" * 60)
    for it <- tree.iterator do println (it)
    println ("-" * 60)
    tree.foreach (println (_))
    println ("-" * 60)
    println (s"size = ${tree.size}")
    println (s"Average number of nodes accessed = ${tree.count / totKeys.toDouble}")

end bpTreeMapTest


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `bpTreeMapTest2` main function used for testing the `BpTreeMap` class by
 *  inserting random key values.
 *  > runMain scalation.database.bpTreeMapTest2
 */
@main def bpTreeMapTest2 (): Unit =

    val tree = new BpTreeMap [Int, Int] ()

    val totKeys = 50
    val mx      = 10 * totKeys

    // for unique random integers

//  import scalation.random.RandiU0                     // comment out due to package dependency
//  val stream = 2
//  val rng    = RandiU0 (mx, stream)
//  for i <- 1 until totKeys do tree.put (rng.iigen (mx), i * i)

    // for random integers
    import java.util.Random
    val seed = 1
    val rng  = new Random (seed)
    for i <- 1 until totKeys do
        val key = rng.nextInt (mx)
        banner (s"put key = $key")
        tree.put (key, i * i)
    end for

    tree.show ()
    println ("-" * 60)
    println (s"size = ${tree.size}")
    println (s"Average number of nodes accessed = ${tree.count / totKeys.toDouble}")

end bpTreeMapTest2

